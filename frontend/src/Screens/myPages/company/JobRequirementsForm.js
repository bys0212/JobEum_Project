import React from 'react';
import { ScrollView, View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import Checkbox from 'expo-checkbox';
import { useForm, Controller } from 'react-hook-form';
import COLORS from '../../../constants/colors';

const disabilityTypesList = [
    'ÏãúÍ∞Å Ïû•Ïï†', 'Ï≤≠Í∞Å Ïû•Ïï†', 'ÏßÄÏ≤¥ Ïû•Ïï†', 'ÏßÄÏ†Å Ïû•Ïï†',
    'Ïñ∏Ïñ¥ Ïû•Ïï†', 'Ïã†Ïû• Ïû•Ïï†', 'Ìò∏Ìù°Í∏∞ Ïû•Ïï†', 'Í∏∞ÌÉÄ'
];

const assistiveDevicesList = [
    'Ìú†Ï≤¥Ïñ¥ ÏÇ¨Ïö©', 'Î≥¥Ï≤≠Í∏∞ ÏÇ¨Ïö©', 'Ï†êÏûê ÏÇ¨Ïö©', 'ÏßÄÌå°Ïù¥ ÏÇ¨Ïö©', 'Î≥¥Ï°∞Í≥µÌïôÍ∏∞Í∏∞ ÏÇ¨Ïö©'
];

const jobInterestList = [
    'ÏÇ¨Î¨¥Î≥¥Ï°∞', 'ÎîîÏûêÏù∏', 'IT/ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç', 'Ï†úÏ°∞/ÏÉùÏÇ∞',
    'ÏÉÅÎã¥/Í≥†Í∞ù ÏùëÎåÄ', 'Î≤àÏó≠/ÌÜµÏó≠', 'ÍµêÏú°/Í∞ïÏùò', 'ÎßàÏºÄÌåÖ/ÌôçÎ≥¥', 'Í∏∞ÌÉÄ'
];

const disabilityGrades = ['Ïã¨Ìïú Ïû•Ïï†', 'Ïã¨ÌïòÏßÄ ÏïäÏùÄ Ïû•Ïï†', 'Ï†ïÎ≥¥ ÏóÜÏùå'];

const workTypesList = [
    'Ïû¨ÌÉùÍ∑ºÎ¨¥ Í∞ÄÎä•', 'ÏÇ¨Î¨¥Ïã§ Ï∂úÍ∑º Í∞ÄÎä•', 'ÌååÌä∏ÌÉÄÏûÑ ÏÑ†Ìò∏', 'ÌíÄÌÉÄÏûÑ ÏÑ†Ìò∏', 'ÏãúÍ∞ÑÏ†ú Í∞ÄÎä•'
];
const JobRequirementsForm = ({ navigation, route }) => {
    const { control, handleSubmit } = useForm({
        defaultValues: {
            disabilityTypes: [],
            disabilityGrade: '',
            assistiveDevices: [],
            preferredWorkType: [],
            jobInterest: [],
        }
    });

    const toggleArrayItem = (array, item) => (
        array.includes(item) ? array.filter(i => i !== item) : [...array, item]
    );

    const onSubmit = (data) => {
        const { onSubmitConditions } = route.params || {};
        if (onSubmitConditions) {
            onSubmitConditions(data); // üëâ AddJobScreenÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
        }
        navigation.goBack(); // üëâ Ïù¥Ï†Ñ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
    };

    const renderCheckboxGroup = (name, list) => (
        <Controller
            control={control}
            name={name}
            render={({ field: { value, onChange } }) => (
                <View style={styles.checkboxGroup}>
                    {list.map((item, idx) => {
                        const selected = value.includes(item);
                        return (
                            <TouchableOpacity
                                key={idx}
                                style={[styles.checkboxContainer, selected && styles.checkboxSelected]}
                                onPress={() => onChange(toggleArrayItem(value, item))}
                                activeOpacity={0.7}
                            >
                                <Checkbox
                                    value={selected}
                                    onValueChange={() => onChange(toggleArrayItem(value, item))}
                                    color={selected ? COLORS.THEMECOLOR : undefined}
                                    style={styles.checkbox}
                                />
                                <Text style={[styles.checkboxLabel, selected && styles.checkboxLabelSelected]}>{item}</Text>
                            </TouchableOpacity>
                        );
                    })}
                </View>
            )}
        />
    );

    const renderRadioGroup = (name, list) => (
        <Controller
            control={control}
            name={name}
            render={({ field: { value, onChange } }) => (
                <View style={styles.checkboxGroup}>
                    {list.map((item, idx) => {
                        const selected = value === item;
                        return (
                            <TouchableOpacity
                                key={idx}
                                style={[styles.checkboxContainer, selected && styles.checkboxSelected]}
                                onPress={() => onChange(item)}
                                activeOpacity={0.7}
                            >
                                <Checkbox
                                    value={selected}
                                    onValueChange={() => onChange(item)}
                                    color={selected ? COLORS.THEMECOLOR : undefined}
                                    style={styles.checkbox}
                                />
                                <Text style={[styles.checkboxLabel, selected && styles.checkboxLabelSelected]}>{item}</Text>
                            </TouchableOpacity>
                        );
                    })}
                </View>
            )}
        />
    );

    return (
        <ScrollView style={styles.container}>
            <Text style={styles.sectionTitle}>Ïû•Ïï† Ïú†Ìòï</Text>
            {renderCheckboxGroup('disabilityTypes', disabilityTypesList)}

            <Text style={styles.sectionTitle}>Ïû•Ïï† Îì±Í∏â (ÌïòÎÇòÎßå ÏÑ†ÌÉù)</Text>
            {renderRadioGroup('disabilityGrade', disabilityGrades)}

            <Text style={styles.sectionTitle}>Î≥¥Ï°∞Í∏∞Í∏∞ ÏÇ¨Ïö© Ïó¨Î∂Ä</Text>
            {renderCheckboxGroup('assistiveDevices', assistiveDevicesList)}

            <Text style={styles.sectionTitle}>Í∑ºÎ¨¥ Í∞ÄÎä• ÌòïÌÉú</Text>
            {renderCheckboxGroup('preferredWorkType', workTypesList)}

            <Text style={styles.sectionTitle}>Ìù¨Îßù ÏßÅÎ¨¥ Î∂ÑÏïº</Text>
            {renderCheckboxGroup('jobInterest', jobInterestList)}

            <TouchableOpacity style={styles.button} onPress={handleSubmit(onSubmit)}>
                <Text style={styles.btnfont}>ÌôïÏù∏ÌïòÍ∏∞</Text>
            </TouchableOpacity>
        </ScrollView>
    );
};

const styles = StyleSheet.create({
    container: {
        padding: 20,
        backgroundColor: '#fff'
    },
    sectionTitle: {
        fontWeight: 'bold',
        fontSize: 18,
        marginBottom: 8,
        marginTop: 20,
        color: 'black'
    },
    checkboxGroup: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'flex-start',
        gap: 10
    },
    checkboxContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 10,
        paddingVertical: 10,
        borderRadius: 8,
        borderWidth: 1,
        borderColor: '#ddd',
        backgroundColor: '#fafafa',
    },
    checkboxSelected: {
        borderColor: COLORS.THEMECOLOR
    },
    checkbox: {
        opacity: 0,
        position: 'absolute',
        width: 0,
        height: 0,
        marginLeft: -15,
    },
    checkboxLabel: {
        fontSize: 14,
        color: 'black',
        textAlign: 'center'

    },
    checkboxLabelSelected: {
        color: COLORS.THEMECOLOR,
        fontWeight: 'bold'
    },
    button: {
        backgroundColor: COLORS.THEMECOLOR,
        borderRadius: 8,
        paddingVertical: 14,
        alignItems: "center",
        marginTop: 10,
        marginBottom: 20,
    },
    btnfont: {
        color: "#fff",
        fontWeight: "bold",
        fontSize: 16
    },
});

export default JobRequirementsForm;